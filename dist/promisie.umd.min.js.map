{"version":3,"file":"promisie.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["'use strict';\r\nconst path = require('path');\r\nconst series_generator = require('./series_generator');\r\nconst series_iterator = require('./iterator');\r\nconst divide = require('./divisions');\r\nconst chainables = require('./chainables');\r\nconst parallel_generator = require('./parallel_generator');\r\nconst settle_generator = require('./settle_generator');\r\nconst dowhilst_generator = require('./dowhilst_generator');\r\nconst retry_generator = require('./retry_generator');\r\nconst { QUEUE } = require(path.join(__dirname, '../bin/index'));\r\n\r\n//@ts-ignore\r\nvar _series = function (operations, cb) {\r\n  for (let i = 0; i < operations.length; i++) {\r\n    if (typeof operations[i] !== 'function') return cb(new TypeError(`ERROR: series can only be called with functions - argument ${i}: ${operations[i]}`));\r\n  }\r\n  let operator = series_generator(operations);\r\n  let iterate = series_iterator(operator, cb);\r\n  iterate();\r\n};\r\n\r\n//@ts-ignore\r\nvar _map = function (operation, values, concurrency, cb) {\r\n  if (!Array.isArray(values)) cb(new TypeError('ERROR: map can only be called with an Array'));\r\n  cb = (typeof concurrency === 'function') ? concurrency : cb;\r\n  let queue = new QUEUE(operation, concurrency, values);\r\n  return queue.insert(...queue.values)\r\n    .resolve()\r\n    //@ts-ignore\r\n    .then(result => cb(null, result))\r\n    .catch(cb);\r\n};\r\n\r\n//@ts-ignore\r\nvar _settle = function (fns) {\r\n  try {\r\n    //@ts-ignore\r\n    let fulfilled = [];\r\n    //@ts-ignore\r\n    let rejected = [];\r\n    //@ts-ignore\r\n    fns[Symbol.iterator] = settle_generator(fns, fulfilled, rejected);\r\n    //@ts-ignore\r\n    return this.all(fns)\r\n      .then(() => {\r\n        return { \r\n          //@ts-ignore\r\n          fulfilled: (fulfilled.length < 1) ? fulfilled : fulfilled.sort((a, b) => a.index - b.index), \r\n          //@ts-ignore\r\n          rejected: (rejected.length < 1) ? rejected : rejected.sort((a, b) => a.index - b.index)\r\n        };\r\n      //@ts-ignore\r\n      }, e => this.reject(e));\r\n  }\r\n  catch (e) {\r\n    //@ts-ignore\r\n    return this.reject(e);\r\n  }\r\n};\r\n\r\n//@ts-ignore\r\nvar _parallel = function (fns, args) {\r\n  try {\r\n    let result = Array.isArray(fns) ? [] : {};\r\n    fns[Symbol.iterator] = parallel_generator(fns, args, result);\r\n    //@ts-ignore\r\n    return this.all(fns)\r\n      //@ts-ignore\r\n      .then(() => result, e => this.reject(e));\r\n  }\r\n  catch (e) {\r\n    //@ts-ignore\r\n    return this.reject(e);\r\n  }\r\n};\r\n\r\n//@ts-ignore\r\nvar _dowhilst = function (fn, evaluate, cb) {\r\n  try {\r\n    let operator = dowhilst_generator(fn, evaluate)();\r\n    let iterate = series_iterator(operator, cb);\r\n    iterate();\r\n  }\r\n  catch (e) {\r\n    cb(e);\r\n  }\r\n};\r\n\r\n//@ts-ignore\r\nvar _iterate = function (generator, cb) {\r\n  let iterate = series_iterator(generator, cb);\r\n  iterate();\r\n};\r\n\r\n//@ts-ignore\r\nvar _retry = function (fn, options, cb) {\r\n  try {\r\n    //@ts-ignore\r\n    let operator = retry_generator.call(this, fn, options)();\r\n    let iterate = series_iterator(operator, cb);\r\n    iterate();\r\n  }\r\n  catch (e) {\r\n    cb(e);\r\n  }\r\n};\r\n\r\n//@ts-ignore\r\nvar safe_assign = function (data) {\r\n  let result = {};\r\n  for (let key in data) {\r\n    let descriptor = Object.getOwnPropertyDescriptor(data, key);\r\n    //@ts-ignore\r\n    if (descriptor && descriptor.writable) result[key] = data[key];\r\n  } \r\n  return result;\r\n};\r\n\r\n//@ts-ignore\r\nvar isGenerator = function (val) {\r\n  let generator = function* () { yield true; };\r\n  let constructor = generator.constructor;\r\n  return val.constructor === generator.constructor;\r\n};\r\n\r\n//@ts-ignore\r\nvar _handleRecursiveParallel = function (fns) {\r\n  return Object.keys(fns).reduce((result, key) => {\r\n    //@ts-ignore\r\n    if (fns[key] && typeof fns[key] === 'object') result[key] = this.parallel.bind(this, _handleRecursiveParallel.call(this, fns[key]));\r\n    //@ts-ignore\r\n    else result[key] = fns[key];\r\n    return result;\r\n  }, (Array.isArray(fns)) ? [] : {});\r\n};\r\n\r\nmodule.exports = {\r\n  series_generator,\r\n  series_iterator,\r\n  divide,\r\n  chainables,\r\n  parallel_generator,\r\n  settle_generator,\r\n  _series,\r\n  _map,\r\n  _parallel,\r\n  _settle,\r\n  safe_assign,\r\n  isGenerator,\r\n  _dowhilst,\r\n  _iterate,\r\n  _retry,\r\n  _handleRecursiveParallel\r\n};\r\n"],"names":["path","require","series_generator","series_iterator","divide","chainables","parallel_generator","settle_generator","dowhilst_generator","retry_generator","QUEUE","join","__dirname","_handleRecursiveParallel","fns","Object","keys","reduce","result","key","this","parallel","bind","call","Array","isArray","module","exports","_series","operations","cb","i","length","TypeError","operator","iterate","_map","operation","values","concurrency","queue","insert","resolve","then","catch","_parallel","args","Symbol","iterator","all","e","reject","_settle","fulfilled","rejected","sort","a","b","index","safe_assign","data","descriptor","getOwnPropertyDescriptor","writable","isGenerator","val","constructor","_dowhilst","fn","evaluate","_iterate","generator","_retry","options"],"mappings":"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"}